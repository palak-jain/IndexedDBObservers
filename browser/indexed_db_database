void IndexedDBDatabase::FilterObservation(IndexedDBTransaction* transaction,
                                          int64_t object_store_id,
                                          blink::WebIDBOperationType type,
                                          const IndexedDBKeyRange& key_range) {
  for (const auto& connection : connections_) {
    bool recorded = false;
    for (const auto& observer : connection->active_observers()) {
      if (!observer->IsRecordingType(type) ||
          !observer->IsRecordingObjectStore(object_store_id))
        continue;
      if (!recorded) {
        if (type == blink::WebIDBClear) {
          transaction->AddObservation(connection->id(),
                                      base::WrapUnique(new IndexedDBObservation(
                                          object_store_id, type)));
        } else {
          transaction->AddObservation(connection->id(),
                                      base::WrapUnique(new IndexedDBObservation(
                                          object_store_id, type, key_range)));
        }
        recorded = true;
      }
      transaction->RecordObserverForLastObservation(connection->id(),
                                                    observer->id());
    }
  }
}

void IndexedDBDatabase::SendObservations(
    std::map<int32_t, std::unique_ptr<IndexedDBObserverChanges>> changes_map) {
  for (const auto& conn : connections_) {
    auto it = changes_map.find(conn->id());
    if (it != changes_map.end())
      conn->callbacks()->OnDatabaseChange(it->first, std::move(it->second));
  }
}
